import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { CreditCard, Lock, Truck, Check, Menu, X, ArrowLeft } from 'lucide-react';
import { useCart } from '../../../../context-api/productcartSlice';
import { useSelector } from 'react-redux';
import axios from 'axios';

const CheckoutPage = () => {
  const navigate = useNavigate(), { items, total, clearCart } = useCart(), user = useSelector((state) => state.auth.user);
  const [currentStep, setCurrentStep] = useState(1), [shippingAddress, setShippingAddress] = useState({ street: user?.address?.street || '', city: user?.address?.city || '', state: user?.address?.state || '', zipCode: user?.address?.zipCode || '', country: user?.address?.country || 'India' });
  const [countries, setCountries] = useState([]), [states, setStates] = useState([]), [cities, setCities] = useState([]);
  const [name, setName] = useState(''), [phone, setPhone] = useState(''), [selectedCountry, setSelectedCountry] = useState(''), [selectedState, setSelectedState] = useState('');
  const [billingAddress, setBillingAddress] = useState(shippingAddress), [sameAsShipping, setSameAsShipping] = useState(true), [paymentMethod, setPaymentMethod] = useState('credit_card');
  const [cardDetails, setCardDetails] = useState({ cardNumber: '', expiryDate: '', cvv: '', cardholderName: '' }), [isProcessing, setIsProcessing] = useState(false), [errors, setErrors] = useState({}), [isMenuOpen, setIsMenuOpen] = useState(false);
  const shipping = total > 100 ? 0 : 9.99, tax = total * 0.08, finalTotal = total + shipping + tax;

  useEffect(() => { if (user) { const fullName = [user.firstName, user.lastName].filter(Boolean).join(' '); setName(fullName); setPhone(user.phone || ''); setShippingAddress((prev) => ({ ...prev, ...user.address })); } axios.get('https://countriesnow.space/api/v0.1/countries/positions').then(res => setCountries(res.data.data.map(c => c.name))).catch(err => console.error("Failed to fetch countries", err)); }, [user]);

  const handleCountryChange = async (e) => { const country = e.target.value; setSelectedCountry(country); setSelectedState(''); setShippingAddress({ ...shippingAddress, country, state: '', city: '' }); try { const res = await axios.post('https://countriesnow.space/api/v0.1/countries/states', { country }); setStates(res.data.data.states.map(s => s.name)); setCities([]); } catch (err) { console.error("Error fetching states", err); } };
  const handleStateChange = async (e) => { const state = e.target.value; setSelectedState(state); setShippingAddress({ ...shippingAddress, state, city: '' }); try { const res = await axios.post('https://countriesnow.space/api/v0.1/countries/state/cities', { country: selectedCountry, state }); setCities(res.data.data); } catch (err) { console.error("Error fetching cities", err); } };
  const handleCityChange = (e) => setShippingAddress({ ...shippingAddress, city: e.target.value });
  const validateShipping = () => { const newErrors = {}; if (!shippingAddress.street.trim()) newErrors.street = 'Street address is required'; if (!shippingAddress.city.trim()) newErrors.city = 'City is required'; if (!shippingAddress.state.trim()) newErrors.state = 'State is required'; if (!shippingAddress.zipCode.trim() || !/^\d{5,6}$/.test(shippingAddress.zipCode)) newErrors.zipCode = 'Valid ZIP code is required'; if (!shippingAddress.country) newErrors.country = 'Country is required'; setErrors(newErrors); return Object.keys(newErrors).length === 0; };
  const validatePayment = () => { const newErrors = {}; if (paymentMethod === 'credit_card') { if (!cardDetails.cardholderName.trim()) newErrors.cardholderName = 'Cardholder name required'; if (!/^\d{16}$/.test(cardDetails.cardNumber.replace(/\s/g, ''))) newErrors.cardNumber = 'Valid 16-digit card number required'; if (!/^\d{2}\/\d{2}$/.test(cardDetails.expiryDate)) newErrors.expiryDate = 'Format should be MM/YY'; if (!/^\d{3}$/.test(cardDetails.cvv)) newErrors.cvv = '3-digit CVV required'; } setErrors(newErrors); return Object.keys(newErrors).length === 0; };
  const handleNextStep = () => { if (currentStep === 1 && !validateShipping()) return; if (currentStep === 2 && !validatePayment()) return; setErrors({}); setCurrentStep(currentStep + 1); };
  const handlePreviousStep = () => { if (currentStep > 1) setCurrentStep(currentStep - 1); };
  const handlePlaceOrder = async () => { setIsProcessing(true); await new Promise(resolve => setTimeout(resolve, 2000)); const order = { orderId: `ORD-${Date.now()}`, userId: user?.id || 'guest', name, phone, items, total: finalTotal, subtotal: total, tax, shipping, status: 'pending', shippingAddress, billingAddress: sameAsShipping ? shippingAddress : billingAddress, paymentMethod, trackingNumber: `TRK${Math.random().toString(36).substr(2, 9).toUpperCase()}`, estimatedDelivery: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], createdAt: new Date().toISOString(), updatedAt: new Date().toISOString(), timeline: [{ status: 'pending', timestamp: new Date().toISOString(), description: 'Order received and is being processed' }], }; try { await axios.post('https://684ac997165d05c5d35a5118.mockapi.io/orders', order); } catch (err) { console.error('Failed to save order:', err); } clearCart(); navigate(`/patientdashboard/order-confirmation/${order.orderId}`, { state: { order } }); };
  if (items.length === 0 && !isProcessing) { navigate('/patientdashboard/cart'); return null; }
  const steps = [{ number: 1, title: 'Shipping', completed: currentStep > 1 }, { number: 2, title: 'Payment', completed: currentStep > 2 }, { number: 3, title: 'Review', completed: false }];

  return (
    <div className="min-h-screen bg-gray-50">
      {isMenuOpen && <div className="fixed inset-0 z-50 bg-white md:hidden"><div className="flex items-center justify-between p-4 border-b"><h2 className="text-lg font-semibold">Menu</h2><button onClick={() => setIsMenuOpen(false)}><X className="h-6 w-6" /></button></div><div className="p-4"><Link to="/patientdashboard/shopping" className="block py-2 text-gray-700 hover:text-[var(--primary-color)] font-medium flex items-center" onClick={() => setIsMenuOpen(false)}><ArrowLeft className="mr-2 h-4 w-4" />Back to Shopping</Link></div></div>}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="mb-6 flex items-center"><button onClick={() => setIsMenuOpen(true)} className="md:hidden p-2 text-gray-700 mr-4"><Menu className="h-5 w-5" /></button><Link to="/patientdashboard/cart" className="flex items-center text-[var(--primary-color)] hover:text-[var(--primary-dark)] text-sm font-medium"><ArrowLeft className="mr-1 h-4 w-4" />Back to Cart</Link></div>
        <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-6">Checkout</h1>
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 sm:mb-8">{steps.map((step, index) => <div key={step.number} className="flex items-center sm:flex-col mb-4 sm:mb-0"><div className={`flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 rounded-full border-2 mb-1 sm:mb-2 ${step.completed ? 'bg-green-500 border-green-500 text-white' : currentStep === step.number ? 'bg-[var(--primary-color)] border-[var(--primary-color)] text-white' : 'border-gray-300 text-gray-500'}`}>{step.completed ? <Check className="h-4 w-4 sm:h-5 sm:w-5" /> : step.number}</div><span className={`text-xs sm:text-sm font-medium ml-2 sm:ml-0 ${step.completed || currentStep === step.number ? 'text-gray-900' : 'text-gray-500'}`}>{step.title}</span>{index < steps.length - 1 && <div className={`hidden sm:block w-12 sm:w-20 h-0.5 mx-2 sm:mx-4 ${step.completed ? 'bg-green-500' : 'bg-gray-300'}`} />}</div>)}</div>
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
          <div className="lg:col-span-8 space-y-6">
            {currentStep === 1 && <div className="bg-white rounded-lg shadow-sm p-4 sm:p-6"><h2 className="text-xl font-semibold mb-4 sm:mb-6 flex items-center"><Truck className="h-5 w-5 mr-2" />Shipping Information</h2><div className="space-y-4"><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label className="block text-sm font-medium text-gray-700 mb-1">Full Name</label><input type="text" value={name} onChange={(e) => setName(e.target.value)} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" placeholder="First Last" /></div><div><label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label><input type="tel" value={phone} onChange={(e) => setPhone(e.target.value)} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" placeholder="+91-XXXXXXXXXX" /></div></div><div><label className="block text-sm font-medium text-gray-700 mb-1">Street Address</label><input type="text" value={shippingAddress.street} onChange={(e) => setShippingAddress({ ...shippingAddress, street: e.target.value })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" />{errors.street && <p className="text-red-500 text-xs mt-1">{errors.street}</p>}</div><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label className="block text-sm font-medium text-gray-700 mb-1">Country</label><select value={selectedCountry} onChange={handleCountryChange} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]"><option value="">Select Country</option>{countries.map((c) => <option key={c} value={c}>{c}</option>)}</select></div><div><label className="block text-sm font-medium text-gray-700 mb-1">State</label><select value={selectedState} onChange={handleStateChange} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" disabled={!states.length}><option value="">Select State</option>{states.map((s) => <option key={s} value={s}>{s}</option>)}</select></div></div><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label className="block text-sm font-medium text-gray-700 mb-1">City</label><select value={shippingAddress.city} onChange={handleCityChange} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" disabled={!cities.length}><option value="">Select City</option>{cities.map((c) => <option key={c} value={c}>{c}</option>)}</select></div><div><label className="block text-sm font-medium text-gray-700 mb-1">ZIP Code</label><input type="text" value={shippingAddress.zipCode} onChange={(e) => setShippingAddress({ ...shippingAddress, zipCode: e.target.value })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" />{errors.zipCode && <p className="text-red-500 text-xs mt-1">{errors.zipCode}</p>}</div></div><div className="flex items-center mt-4"><input type="checkbox" checked={sameAsShipping} onChange={(e) => setSameAsShipping(e.target.checked)} className="h-4 w-4 text-[var(--primary-color)] focus:ring-[var(--primary-color)] border-gray-300 rounded" /><label className="ml-2 block text-sm text-gray-700">Billing address same as shipping</label></div></div></div>}
            {currentStep === 2 && <div className="bg-white rounded-lg shadow-sm p-4 sm:p-6"><h2 className="text-xl font-semibold mb-4 sm:mb-6 flex items-center"><CreditCard className="h-5 w-5 mr-2" />Payment Information</h2><div className="flex flex-col sm:flex-row gap-2 sm:gap-4 mb-4 sm:mb-6">{['credit_card', 'paypal', 'upi'].map((method) => <button key={method} onClick={() => setPaymentMethod(method)} className={`px-3 py-2 sm:px-4 sm:py-2 rounded-lg border transition-all text-xs sm:text-sm ${paymentMethod === method ? 'bg-[var(--primary-color)] text-white border-[var(--primary-color)]' : 'bg-white text-gray-600 border-gray-300 hover:bg-gray-50'}`}>{method === 'credit_card' ? 'Credit/Debit Card' : method === 'paypal' ? 'PayPal' : 'UPI'}</button>)}</div>
              {paymentMethod === 'credit_card' && <div className="space-y-4"><div><label className="block text-sm font-medium text-gray-700 mb-1">Cardholder Name</label><input type="text" value={cardDetails.cardholderName} onChange={(e) => setCardDetails({ ...cardDetails, cardholderName: e.target.value })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" placeholder="John Doe" />{errors.cardholderName && <p className="text-red-500 text-xs mt-1">{errors.cardholderName}</p>}</div><div><label className="block text-sm font-medium text-gray-700 mb-1">Card Number</label><input type="text" value={cardDetails.cardNumber} onChange={(e) => setCardDetails({ ...cardDetails, cardNumber: e.target.value })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" placeholder="1234 5678 9012 3456" />{errors.cardNumber && <p className="text-red-500 text-xs mt-1">{errors.cardNumber}</p>}</div><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label className="block text-sm font-medium text-gray-700 mb-1">Expiry Date</label><input type="text" value={cardDetails.expiryDate} onChange={(e) => setCardDetails({ ...cardDetails, expiryDate: e.target.value })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" placeholder="MM/YY" />{errors.expiryDate && <p className="text-red-500 text-xs mt-1">{errors.expiryDate}</p>}</div><div><label className="block text-sm font-medium text-gray-700 mb-1">CVV</label><input type="text" value={cardDetails.cvv} onChange={(e) => setCardDetails({ ...cardDetails, cvv: e.target.value })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--primary-color)]" placeholder="123" />{errors.cvv && <p className="text-red-500 text-xs mt-1">{errors.cvv}</p>}</div></div></div>}
              {paymentMethod === 'paypal' && <div className="text-center p-4 bg-gray-50 rounded-lg"><p className="text-gray-700 mb-4">You will be redirected to PayPal to complete your payment.</p><button className="bg-yellow-500 hover:bg-yellow-600 text-white font-medium px-4 py-2 rounded-lg transition-colors" onClick={() => alert("Redirecting to PayPal...")}>Continue with PayPal</button></div>}
              {paymentMethod === 'upi' && <div className="text-center p-4 bg-gray-50 rounded-lg"><p className="text-gray-700 mb-4">Scan the QR code using any UPI app to pay</p><img src="https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=upi://pay?pa=example@upi&pn=HealthLab&am=10.00" alt="Scan to Pay" className="w-32 h-32 mx-auto mb-2 rounded-lg" /><p className="text-sm text-gray-500">UPI ID: <span className="font-medium">pay@upi</span></p></div>}</div>}
            {currentStep === 3 && <div className="bg-white rounded-lg shadow-sm p-4 sm:p-6"><h2 className="text-xl font-semibold mb-4 sm:mb-6">Review Your Order</h2><div className="mb-6"><h3 className="text-lg font-medium mb-3">Items</h3><div className="space-y-3">{items.map((item) => <div key={item.product.id} className="flex flex-col sm:flex-row items-start sm:items-center gap-3 p-3 bg-gray-50 rounded-lg"><img src={item.product.image} alt={item.product.name} className="w-16 h-16 object-cover rounded-lg" /><div className="flex-1 min-w-0"><h4 className="font-medium text-sm sm:text-base">{item.product.name}</h4><p className="text-xs sm:text-sm text-gray-600">Qty: {item.quantity}</p></div><p className="font-semibold text-sm sm:text-base">₹{(item.product.price * item.quantity).toFixed(2)}</p></div>)}</div></div><div className="space-y-4"><div className="bg-gray-50 p-3 sm:p-4 rounded-lg"><h3 className="text-base sm:text-lg font-medium mb-2">Shipping Address</h3><div className="text-xs sm:text-sm text-gray-600 space-y-1"><p>{shippingAddress.street}</p><p>{shippingAddress.city}, {shippingAddress.state} {shippingAddress.zipCode}</p><p>{shippingAddress.country}</p></div></div><div className="bg-gray-50 p-3 sm:p-4 rounded-lg"><h3 className="text-base sm:text-lg font-medium mb-2">Payment Method</h3><p className="text-xs sm:text-sm text-gray-600 capitalize">{paymentMethod.replace('_', ' ')}</p></div></div></div>}
            <div className="flex flex-col sm:flex-row justify-between gap-3 mt-6"><button onClick={handlePreviousStep} disabled={currentStep === 1} className={`px-4 py-2 rounded-lg font-medium text-sm sm:text-base ${currentStep === 1 ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}>Previous</button>{currentStep < 3 ? <button onClick={handleNextStep} className="px-4 py-2 bg-[var(--primary-color)] text-white rounded-lg font-medium hover:bg-[var(--primary-dark)] text-sm sm:text-base">Next</button> : <button onClick={handlePlaceOrder} disabled={isProcessing} className="px-4 py-2 bg-green-600 text-white rounded-lg font-medium hover:bg-green-700 disabled:opacity-70 flex items-center justify-center text-sm sm:text-base">{isProcessing ? <><div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>Processing...</> : <><Lock className="h-4 w-4 mr-2" />Place Order</>}</button>}</div>
          </div>
          <div className="lg:col-span-4"><div className="bg-white rounded-lg shadow-sm p-4 sm:p-6 sticky top-20"><h3 className="text-lg sm:text-xl font-semibold mb-4">Order Summary</h3><div className="space-y-3"><div className="flex justify-between text-sm sm:text-base"><span className="text-gray-600">Subtotal</span><span>₹{total.toFixed(2)}</span></div><div className="flex justify-between text-sm sm:text-base"><span className="text-gray-600">Shipping</span><span>{shipping === 0 ? 'Free' : `₹${shipping.toFixed(2)}`}</span></div><div className="flex justify-between text-sm sm:text-base"><span className="text-gray-600">Tax</span><span>₹{tax.toFixed(2)}</span></div><div className="border-t border-gray-200 pt-3 mt-3"><div className="flex justify-between font-semibold text-base sm:text-lg"><span>Total</span><span className="text-[var(--primary-color)]">₹{finalTotal.toFixed(2)}</span></div></div></div></div></div>
        </div>
      </div>
    </div>
  );
};

export default CheckoutPage;
